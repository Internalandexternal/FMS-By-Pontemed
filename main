import React, { useState, useEffect, useRef } from 'react';  

import { View, Text, FlatList, Button, Alert, TextInput, ActivityIndicator } from 'react-native';  

import axios from 'axios';  

import debounce from 'lodash.debounce';  

import AgoraRTC from 'agora-rtc-sdk-ng';  

import { useStripe, CardField } from '@stripe/stripe-react-native'; 

const RoleBasedDashboard = ({ userRole }) => { switch (userRole) { case 'patient': return ( ); 

case 'non-patient': 
  return ( 
    <View> 
      <Text>Welcome, Wellness Enthusiast!</Text> 
      <Button title="Access Training Programs" onPress={() => {/* Navigate to Training Programs */}} /> 
      <Button title="Track Progress" onPress={() => {/* Navigate to Progress Tracker */}} /> 
      <Button title="Preventive Protocols" onPress={() => {/* Navigate to Protocols */}} /> 
    </View> 
  ); 
 
case 'doctor': 
  return ( 
    <View> 
      <Text>Welcome, Doctor!</Text> 
      <Button title="Manage Patient Data" onPress={() => {/* Navigate to Patient Management */}} /> 
      <Button title="Conduct Telehealth" onPress={() => {/* Navigate to Telehealth */}} /> 
      <Button title="View Analytics and Reports" onPress={() => {/* Navigate to Analytics */}} /> 
    </View> 
  ); 
 
case 'trainer': 
  return ( 
    <View> 
      <Text>Welcome, Trainer!</Text> 
      <Button title="Administer Training Goals" onPress={() => {/* Navigate to Training Goals */}} /> 
      <Button title="Coordinate with Professionals" onPress={() => {/* Navigate to Coordination */}} /> 
    </View> 
  ); 
 
case 'admin': 
  return ( 
    <View> 
      <Text>Welcome, Admin!</Text> 
      <Button title="Manage User Roles" onPress={() => {/* Navigate to Role Management */}} /> 
      <Button title="Monitor Platform Usage" onPress={() => {/* Navigate to Monitoring */}} /> 
    </View> 
  ); 
 
case 'super-admin': 
  return ( 
    <View> 
      <Text>Welcome, Super Admin!</Text> 
      <Button title="Full System Access" onPress={() => {/* Navigate to Full Access Panel */}} /> 
      <Button title="Troubleshoot System" onPress={() => {/* Navigate to Troubleshooting */}} /> 
    </View> 
  ); 
 
case 'any': 
  return ( 
    <View> 
      <Text>Welcome, User!</Text> 
      <Button title="Search for Chairs" onPress={() => {/* Navigate to Chair Search */}} /> 
      <Button title="Book Appointments" onPress={() => {/* Navigate to Booking */}} /> 
      <Button title="Make Prepayments" onPress={() => {/* Navigate to Payments */}} /> 
    </View> 
  ); 
 
default: 
  return ( 
    <View> 
      <Text>Welcome! Please select a role.</Text> 
    </View> 
  ); 
  

} }; 

const AppointmentBooking = ({ userRole }) => { const [slots, setSlots] = useState([]); const [location, setLocation] = useState(''); const [type, setType] = useState(''); const [loading, setLoading] = useState(false); const [cardDetails, setCardDetails] = useState(null); const stripe = useStripe(); 

const fetchSlots = debounce(async () => { if (location && type) { try { setLoading(true); const response = await axios.get( https://api.pontemed.com/appointments/slots, { params: { location, type }, } ); setSlots(response.data); } catch (error) { Alert.alert('Error', error.response?.data?.message || 'Failed to fetch slots.'); } finally { setLoading(false); } } }, 500); 

useEffect(() => { fetchSlots(); }, [location, type]); 

const bookSlot = async (slotId, amount, currency) => { try { // Create a payment intent const paymentIntentResponse = await axios.post('https://api.pontemed.com/payments/create-intent', { amount, currency, appointmentId: slotId, }); 

 const { clientSecret } = paymentIntentResponse.data; 
 
  // Confirm payment using Stripe with card details 
  const { paymentIntent, error } = await stripe.confirmPayment(clientSecret, { 
    paymentMethodType: 'Card', 
    paymentMethodData: { card: cardDetails }, 
  }); 
 
  if (error) { 
    Alert.alert('Payment Failed', error.message); 
    return; 
  } 
 
  if (paymentIntent.status === 'Succeeded') { 
    // Confirm booking after successful payment 
    await axios.post('https://api.pontemed.com/appointments/book', { slotId }); 
    Alert.alert('Booking Successful', 'Your payment and booking are confirmed.'); 
 
    // Schedule a reminder for the appointment 
    await scheduleReminder(slotId); 
  } 
} catch (error) { 
  Alert.alert('Booking Failed', error.response?.data?.message || 'Failed to book the slot.'); 
} 
  

}; 

const cancelAppointment = async (appointmentId) => { try { const response = await axios.post('https://api.pontemed.com/appointments/cancel', { appointmentId }); Alert.alert('Cancellation Successful', response.data.message); } catch (error) { Alert.alert('Cancellation Failed', error.response?.data?.message || 'Failed to cancel the appointment.'); } }; 

return ( ); }; 

const scheduleReminder = async (appointmentId) => { try { const response = await axios.post('https://api.pontemed.com/reminders/schedule', { appointmentId }); console.log('Reminder Scheduled:', response.data); } catch (error) { console.error('Failed to Schedule Reminder:', error.response?.data || error.message); } }; 

const AgoraCall = ({ appId, token, channelName, uid, userRole }) => { const client = useRef(null); const localAudioTrack = useRef(null); const localVideoTrack = useRef(null); const [sessionTimer, setSessionTimer] = useState(0); const timerInterval = useRef(null); 

const joinChannel = async () => { client.current = AgoraRTC.createClient({ mode: 'rtc', codec: 'vp8' }); 

client.current.on("user-published", async (user, mediaType) => { 
  await client.current.subscribe(user, mediaType); 
 
  if (mediaType === "video") { 
    const remoteVideoTrack = user.videoTrack; 
    remoteVideoTrack.play("remote-player"); 
  } 
}); 
 
await client.current.join(appId, channelName, token, uid); 
 
localAudioTrack.current = await AgoraRTC.createMicrophoneAudioTrack(); 
localVideoTrack.current = await AgoraRTC.createCameraVideoTrack(); 
 
await client.current.publish([localAudioTrack.current, localVideoTrack.current]); 
 
// Start the session timer 
timerInterval.current = setInterval(() => { 
  setSessionTimer((prev) => prev + 1); 
}, 1000); 
  

}; 

const leaveChannel = async () => { localAudioTrack.current.close(); localVideoTrack.current.close(); await client.current.leave(); 

// Stop the session timer 
clearInterval(timerInterval.current); 
  

}; 

return ( 
